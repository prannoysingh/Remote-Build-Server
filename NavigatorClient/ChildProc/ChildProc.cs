/////////////////////////////////////////////////////////////////////////////////
// ChildProc.cs : Builds the dll on request from mother storage                //
//                                                                             // 
// ver 1.0                                                                     //
//                                                                             //
// Platform     : HP Pavilion, Windows 10 Pro x64, Visual Studio 2017          //
// Application  : CSE-681 - Builder Demonstration                              //
// Author       : Prannoy Singh, EECS Department, Syracuse University          //
//                (315)-728-8099, psingh07@syr.edu                             //
/////////////////////////////////////////////////////////////////////////////////
/*
 * Description: The Child Process will build the library based on the messages 
 *              recieved from the mother builder and generate the test request,
 *              these test request are forwarded to the Test harness for execution
 *              and the build logs generated are sent to the repository for storage.
 *              
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using MessagePassingComm;
using System.Threading;
using System.IO;
using System.Windows;

namespace ChildProc
{
    class ChildProc
    {
        private static int dllCount = 1;
        private static int buildCount = 1;
        private static int logCount = 1;
        public static Comm comm;
        static int port = 8090;
        static Stack<string> dllName = new Stack<string>();
        //const string childAddress = "http://localhost:8079/IPluggableComm";
        static string[] fileContents = { "Author: Prannoy Singh", "Date: " + DateTime.UtcNow.Date.ToString("dd/MM/yyyy"),"Time: " +
                                            string.Format("{0:HH:mm:ss tt}", DateTime.Now) ,"Build Status:"};
        Thread ChildHandler;
        public List<string> testfiles { get; set; } = new List<string>();

        private static string childBuilderStorage { get; set; } = "../../../ChildStorage/Child";
        private static string DLL_Storage { get; set; } = "../../ChildStorage/Child";
        //private static string buildLogPath ;
        private static string dll_name;// { get; set; } = "";
        private static string buildLogName;// = "";
        private static string test_name;// = "";
        private static string test_location;// = "";
        //constructor
        public ChildProc(int a)
        {
        }

        // starts the connection and the thread
        public ChildProc()
        {
            comm = new Comm("http://localhost", port);
            childBuilderStorage = childBuilderStorage + port;
            if (!Directory.Exists(childBuilderStorage))
                Directory.CreateDirectory(childBuilderStorage);
            CommMessage csndMsg = new CommMessage(CommMessage.MessageType.request);
            ChildHandler = new Thread(processMessages);
            ChildHandler.Start();
        }

        // sends ready message to the mother server when the task is complete
        static void sendReadyMessage()
        {
            CommMessage csndMsg = new CommMessage(CommMessage.MessageType.request);
            csndMsg.command = "ready";
            csndMsg.author = "Prannoy";
            csndMsg.to = "http://localhost:8081/IPluggableComm";
            csndMsg.from = "http://localhost:" + port + "/IPluggableComm";// different ports for different communication levels 
            comm.postMessage(csndMsg);
        }

        // send  test harness the test request generated by the child process for execution
        static void sendTestMessage(string test_name, string loc)
        {
            CommMessage csndMsg = new CommMessage(CommMessage.MessageType.request);
            csndMsg.command = "Sending DLL to the test harness";
            csndMsg.author = "Prannoy";
            csndMsg.to = "http://localhost:8083/IPluggableComm";
            csndMsg.from = "http://localhost:" + port + "/IPluggableComm";// different ports for different communication levels 
            csndMsg.arguments.Add(test_name);
            comm.postFile2(test_name, loc);
            Console.WriteLine("\n DLL SENT SUCCESSFULLY \n");
            comm.postMessage(csndMsg);
        }

        // request repository for files
        static void sendRepoMessage(List<string> files)
        {
            CommMessage csndMsg = new CommMessage(CommMessage.MessageType.request);

            csndMsg.command = "requesting files from Child";
            csndMsg.author = "Prannoy";
            csndMsg.to = "http://localhost:8082/IPluggableComm";
            csndMsg.from = "http://localhost:" + port + "/IPluggableComm";// different ports for different communication levels 
            csndMsg.arguments = files;
            comm.postMessage(csndMsg);
        }
        private static int index = 1;
        // Handles all the communication recieved through WCF
        public static void processMessages()
        {
            while (true)
            {
                CommMessage msg = comm.getMessage();
                if (msg.command != null)
                {
                    if (!msg.type.Equals("connect") && !msg.command.Equals("file"))
                        msg.show();

                    if (msg.command.Equals("file"))
                    {
                        File.WriteAllText("../../../BuilderStorage/d.xml", msg.arguments[0]);
                    }
                    if (msg.command.Equals("Sending files to child."))
                    {
                        buildLibrary();
                        //createLogs(); //calling inside build library both try and catch
                        //logRepository(buildLogName);
                        //sendTestMessage(test_name, test_location);  THIS IS NOT WORKING
                        Console.WriteLine("Build Successfull!!");
                        sendReadyMessage();   // sending ready messages
                    }
                    if(msg.command == "test request")
                    {
                        CommMessage csndMsg = new CommMessage(CommMessage.MessageType.request);
                        csndMsg.command = "test request";
                        csndMsg.author = "Prannoy";
                        csndMsg.to = "http://localhost:8083/IPluggableComm";
                        csndMsg.from = "http://localhost:" + port + "/IPluggableComm";// different ports for different communication levels 
                        csndMsg.arguments.Add(msg.arguments[0]);
                        comm.postMessage(csndMsg);
                    }
                    if (msg.command.Equals("First Message to Child"))//("Process Pool"))
                    {
                        sendReadyMessage();
                        //sendRepoMessage(msg.arguments);
                        //Console.WriteLine("Files recieved successfully from the repository and stored  at ../../../ ChildStorage / Child"+port);
                        //buildLibrary();     // the build library sends the ready messages
                        //Console.WriteLine("Build Successfull!!");
                    }
                    
                    if (msg.command.Equals("Process Pool"))
                    {
                        string absPath = Path.GetFullPath("../../../ChildStorage/Child" + port + "/BuildXML" + index + ".xml");
                        File.WriteAllText(absPath, msg.xmlFile);
                        index++;
                        sendRepoMessage(msg.arguments);
                        Console.WriteLine("Files recieved successfully from the repository and stored  at ../../../ ChildStorage / Child" + port);
                    }
                    if (msg.command.Equals("Quit"))
                    {
                        Console.WriteLine("Quit Message Recieved");
                        try
                        {
                            foreach (Process proc in Process.GetProcessesByName("ChildProc"))
                            {
                                //port++;
                                proc.Kill();
                                proc.WaitForExit();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
                }
            }
        }

        private static void createLogs()
        {
            buildLogName = test_name + "_Buildlog.txt";//"Buildlog" + port+"_"+logCount + ".txt";
            logCount++;
            string absPath = Path.GetFullPath("../../../ChildStorage/Child"+port+"/" + buildLogName);
            using (System.IO.StreamWriter file = new System.IO.StreamWriter(absPath))
            {
                foreach (string line in fileContents)
                {
                    // If the line doesn't contain the word 'Second', write the line to the file.
                    file.WriteLine(line);

                }
            }
            logRepository(buildLogName);
        }

        // returns the build path
        private static String getBuildPath()
        {
            return childBuilderStorage;
        }

        // generates a single dll file for a test driver and its multiple test codes
        // the dll's generated are stores in Test Harness Storage
        public static void buildLibrary()
        {
            try
            {
                var frameworkPath = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory();
                var cscPath = Path.Combine(frameworkPath, "csc.exe");
                Process p = new Process();
                p.StartInfo.FileName = cscPath;
                if (!Directory.Exists(getBuildPath()))
                    Directory.CreateDirectory(getBuildPath());
                p.StartInfo.WorkingDirectory = getBuildPath();
                Console.WriteLine("========================================");
                Console.WriteLine(getBuildPath());
                string str = @"/t:library /out:../../ChildStorage/Child"+port+"/MyLibrary" + port+"_"+dllCount + ".dll";
                test_name = "MyLibrary" + port + "_" + dllCount + ".dll";
                test_location = "/Child" + port;// + "/";
                dll_name = "MyLibrary" + port + "_" + dllCount + ".dll";
                dllCount++;
                StringBuilder sb = new StringBuilder(str);
                foreach (string file in Directory.EnumerateFiles(getBuildPath(), "*.cs", SearchOption.AllDirectories))
                {
                    string fileName = Path.GetFileName(file);
                    Console.WriteLine("========================================");
                    Console.WriteLine("The file names are {0}", fileName);
                    Console.WriteLine("========================================");
                    sb.Append(" ");
                    sb.Append(fileName);
                }
                buildCount++;
                p.StartInfo.Arguments = sb.ToString();
                p.StartInfo.UseShellExecute = false;
                p.StartInfo.RedirectStandardOutput = true;
                p.Start();
                Console.WriteLine(p.StandardOutput.ReadToEnd());
                p.WaitForExit();
                Console.WriteLine("\nThe DLL is generated.\n");
                fileContents[3] = "Build Status: Succesfull";
                sendTestMessage(test_name, test_location);    // sending message to the test harness  
                createLogs();
            }
            catch (Exception e)
            {
                fileContents[3] = "Build Status: Fail" + e.GetType();
            }
        }

        // sends the build logs to the repository
        public static void logRepository(string fileName)
        {
            CommMessage csndMsg = new CommMessage(CommMessage.MessageType.request);
            csndMsg.command = "Build Logs";
            csndMsg.author = "Prannoy";
            csndMsg.to = "http://localhost:8082/IPluggableComm";
            csndMsg.from = "http://localhost:" + port + "/IPluggableComm";// different ports for different communication levels 
            csndMsg.arguments.Add(fileName);
            comm.postFile1(fileName, port.ToString());
            comm.postMessage(csndMsg);
        }


        // checks if folder is empty, if yes it returns true, else it returns false
        public static bool CheckFolderEmpty(string path)
        {
            if (string.IsNullOrEmpty(path))
            {
                return true;
                //throw new ArgumentNullException("path");
            }

            var folder = new DirectoryInfo(path);
            if (folder.Exists)
            {
                return false;
                //                return folder.GetFileSystemInfos().Length == 0;
            }

            throw new DirectoryNotFoundException();
        }

        static void Main(string[] args)
        {
            //port = port + 1;
            port = port + Int32.Parse(args[0]);
            Console.Title = "ChildProc";
            ChildProc c = new ChildProc();
            Console.Write("\n  Child Process");
            Console.Write("\n ====================");
            Console.WriteLine("\n The port no is : {0}", port);            
        }
    }
}

